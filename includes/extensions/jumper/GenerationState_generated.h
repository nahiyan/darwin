// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GENERATIONSTATE_JUMPER_H_
#define FLATBUFFERS_GENERATED_GENERATIONSTATE_JUMPER_H_

#include "flatbuffers/flatbuffers.h"

namespace Jumper
{
  struct GenerationState;
  struct GenerationStateBuilder;

  struct Member;
  struct MemberBuilder;

  struct GenerationState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
  {
    typedef GenerationStateBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE
    {
      VT_POPULATION = 4
    };
    const flatbuffers::Vector<flatbuffers::Offset<Member>> *population() const
    {
      return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Member>> *>(VT_POPULATION);
    }
    bool Verify(flatbuffers::Verifier &verifier) const
    {
      return VerifyTableStart(verifier) &&
             VerifyOffset(verifier, VT_POPULATION) &&
             verifier.VerifyVector(population()) &&
             verifier.VerifyVectorOfTables(population()) &&
             verifier.EndTable();
    }
  };

  struct GenerationStateBuilder
  {
    typedef GenerationState Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_population(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Member>>> population)
    {
      fbb_.AddOffset(GenerationState::VT_POPULATION, population);
    }
    explicit GenerationStateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb)
    {
      start_ = fbb_.StartTable();
    }
    flatbuffers::Offset<GenerationState> Finish()
    {
      const auto end = fbb_.EndTable(start_);
      auto o = flatbuffers::Offset<GenerationState>(end);
      return o;
    }
  };

  inline flatbuffers::Offset<GenerationState> CreateGenerationState(
      flatbuffers::FlatBufferBuilder &_fbb,
      flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Member>>> population = 0)
  {
    GenerationStateBuilder builder_(_fbb);
    builder_.add_population(population);
    return builder_.Finish();
  }

  inline flatbuffers::Offset<GenerationState> CreateGenerationStateDirect(
      flatbuffers::FlatBufferBuilder &_fbb,
      const std::vector<flatbuffers::Offset<Member>> *population = nullptr)
  {
    auto population__ = population ? _fbb.CreateVector<flatbuffers::Offset<Member>>(*population) : 0;
    return CreateGenerationState(
        _fbb,
        population__);
  }

  struct Member FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
  {
    typedef MemberBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE
    {
      VT_CHROMOSOMES = 4,
      VT_SCORE = 6
    };
    const flatbuffers::Vector<double> *chromosomes() const
    {
      return GetPointer<const flatbuffers::Vector<double> *>(VT_CHROMOSOMES);
    }
    float score() const
    {
      return GetField<float>(VT_SCORE, 0.0f);
    }
    bool Verify(flatbuffers::Verifier &verifier) const
    {
      return VerifyTableStart(verifier) &&
             VerifyOffset(verifier, VT_CHROMOSOMES) &&
             verifier.VerifyVector(chromosomes()) &&
             VerifyField<float>(verifier, VT_SCORE) &&
             verifier.EndTable();
    }
  };

  struct MemberBuilder
  {
    typedef Member Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_chromosomes(flatbuffers::Offset<flatbuffers::Vector<double>> chromosomes)
    {
      fbb_.AddOffset(Member::VT_CHROMOSOMES, chromosomes);
    }
    void add_score(float score)
    {
      fbb_.AddElement<float>(Member::VT_SCORE, score, 0.0f);
    }
    explicit MemberBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb)
    {
      start_ = fbb_.StartTable();
    }
    flatbuffers::Offset<Member> Finish()
    {
      const auto end = fbb_.EndTable(start_);
      auto o = flatbuffers::Offset<Member>(end);
      return o;
    }
  };

  inline flatbuffers::Offset<Member> CreateMember(
      flatbuffers::FlatBufferBuilder &_fbb,
      flatbuffers::Offset<flatbuffers::Vector<double>> chromosomes = 0,
      float score = 0.0f)
  {
    MemberBuilder builder_(_fbb);
    builder_.add_score(score);
    builder_.add_chromosomes(chromosomes);
    return builder_.Finish();
  }

  inline flatbuffers::Offset<Member> CreateMemberDirect(
      flatbuffers::FlatBufferBuilder &_fbb,
      const std::vector<double> *chromosomes = nullptr,
      float score = 0.0f)
  {
    auto chromosomes__ = chromosomes ? _fbb.CreateVector<double>(*chromosomes) : 0;
    return CreateMember(
        _fbb,
        chromosomes__,
        score);
  }

  inline const GenerationState *GetGenerationState(const void *buf)
  {
    return flatbuffers::GetRoot<GenerationState>(buf);
  }

  inline const GenerationState *GetSizePrefixedGenerationState(const void *buf)
  {
    return flatbuffers::GetSizePrefixedRoot<GenerationState>(buf);
  }

  inline bool VerifyGenerationStateBuffer(
      flatbuffers::Verifier &verifier)
  {
    return verifier.VerifyBuffer<GenerationState>(nullptr);
  }

  inline bool VerifySizePrefixedGenerationStateBuffer(
      flatbuffers::Verifier &verifier)
  {
    return verifier.VerifySizePrefixedBuffer<GenerationState>(nullptr);
  }

  inline void FinishGenerationStateBuffer(
      flatbuffers::FlatBufferBuilder &fbb,
      flatbuffers::Offset<GenerationState> root)
  {
    fbb.Finish(root);
  }

  inline void FinishSizePrefixedGenerationStateBuffer(
      flatbuffers::FlatBufferBuilder &fbb,
      flatbuffers::Offset<GenerationState> root)
  {
    fbb.FinishSizePrefixed(root);
  }

} // namespace Jumper

#endif // FLATBUFFERS_GENERATED_GENERATIONSTATE_JUMPER_H_
